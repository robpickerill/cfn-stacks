AWSTemplateFormatVersion: 2010-09-09
Description: Kubernetes Stack
Parameters:
  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: My EC2 key pair name

Mappings:
  # https://cloud-images.ubuntu.com/locator/ec2/
  RegionMap:
    "ap-northeast-1":
      ami: "ami-d82efcb9"
    "ap-southeast-1":
      ami: "ami-d554f1b6"
    "ap-southeast-2":
      ami: "ami-0bc1f168"
    "cn-north-1":
      ami: "ami-5c875331"
    "eu-central-1":
      ami: "ami-cbb844a4"
    "eu-west-1":
      ami: "ami-844e0bf7"
    "sa-east-1":
      ami: "ami-b175e6dd"
    "us-east-1":
      ami: "ami-e3c3b8f4"
    "us-west-1":
      ami: "ami-204e0040"
    "us-west-2":
      ami: "ami-167ba776"

Resources:
  Vpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.240.0.0/16"
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: kubernetes

  DhcpOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainName: us-west-2.compute.internal
      DomainNameServers: ["AmazonProvidedDNS"]
      Tags:
        - Key: Name
          Value: kubernetes

  DhcpOptionsAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      DhcpOptionsId: !Ref "DhcpOptions"
      VpcId: !Ref "Vpc"

  Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref "Vpc"
      CidrBlock: "10.240.0.0/16"
      Tags:
        - Key: Name
          Value: kubernetes

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: kubernetes

  GatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref "Vpc"
      InternetGatewayId: !Ref "InternetGateway"

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "Vpc"
      Tags:
        - Key: Name
          Value: kubernetes

  RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref "RouteTable"
      SubnetId: !Ref "Subnet"

  Route:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref "RouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "InternetGateway"

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Kubernetes security group"
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort:   0
          ToPort:     65535
          CidrIp:     "10.240.0.0/16"
        - IpProtocol: tcp
          FromPort:   22
          ToPort:     22
          CidrIp:     "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort:   6443
          ToPort:     6443
          CidrIp:     "0.0.0.0/0"
      VpcId: !Ref "Vpc"
      Tags:
        - Key: Name
          Value: kubernetes


  LoadBalancer:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      LoadBalancerName: "kubernetes"
      Subnets:
        - !Ref "Subnet"
      SecurityGroups:
        - !Ref "SecurityGroup"
      Listeners:
        - Protocol: TCP
          LoadBalancerPort: 6443
          InstanceProtocol: TCP
          InstancePort: 6443

  Role:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: kubernetes
      AssumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {"Effect": "Allow", "Principal": { "Service": "ec2.amazonaws.com"}, "Action": "sts:AssumeRole"}
          ]
        }
      Policies:
        - PolicyName: kubernetes
          PolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {"Effect": "Allow", "Action": ["ec2:*"], "Resource": ["*"]},
                {"Effect": "Allow", "Action": ["elasticloadbalancing:*"], "Resource": ["*"]},
                {"Effect": "Allow", "Action": ["route53:*"], "Resource": ["*"]},
                {"Effect": "Allow", "Action": ["ecr:*"], "Resource": ["*"]}
              ]
            }

  InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref "Role"

  Controller0:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "ami"]
      KeyName: !Ref "KeyName"
      InstanceType: "t2.small"
      IamInstanceProfile: !Ref "InstanceProfile"
      SourceDestCheck: False
      NetworkInterfaces:
        - DeviceIndex: 0
          PrivateIpAddress: "10.240.0.10"
          AssociatePublicIpAddress: True
          SubnetId: !Ref "Subnet"
          GroupSet:
            - !Ref "SecurityGroup"
          DeleteOnTermination: True
      Tags:
        - Key: Name
          Value: controller0

  Controller1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "ami"]
      KeyName: !Ref "KeyName"
      InstanceType: "t2.small"
      IamInstanceProfile: !Ref "InstanceProfile"
      SourceDestCheck: False
      NetworkInterfaces:
        - DeviceIndex: 0
          PrivateIpAddress: "10.240.0.11"
          AssociatePublicIpAddress: True
          SubnetId: !Ref "Subnet"
          GroupSet:
            - !Ref "SecurityGroup"
          DeleteOnTermination: True
      Tags:
        - Key: Name
          Value: controller1

  Controller2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "ami"]
      KeyName: !Ref "KeyName"
      InstanceType: "t2.small"
      IamInstanceProfile: !Ref "InstanceProfile"
      SourceDestCheck: False
      NetworkInterfaces:
        - DeviceIndex: 0
          PrivateIpAddress: "10.240.0.12"
          AssociatePublicIpAddress: True
          SubnetId: !Ref "Subnet"
          GroupSet:
            - !Ref "SecurityGroup"
          DeleteOnTermination: True
      Tags:
        - Key: Name
          Value: controller2

  Worker0:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "ami"]
      KeyName: !Ref "KeyName"
      InstanceType: "t2.small"
      IamInstanceProfile: !Ref "InstanceProfile"
      SourceDestCheck: False
      NetworkInterfaces:
        - DeviceIndex: 0
          PrivateIpAddress: "10.240.0.20"
          AssociatePublicIpAddress: True
          SubnetId: !Ref "Subnet"
          GroupSet:
            - !Ref "SecurityGroup"
          DeleteOnTermination: True
      Tags:
        - Key: Name
          Value: worker0

  Worker1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "ami"]
      KeyName: !Ref "KeyName"
      InstanceType: "t2.small"
      IamInstanceProfile: !Ref "InstanceProfile"
      SourceDestCheck: False
      NetworkInterfaces:
        - DeviceIndex: 0
          PrivateIpAddress: "10.240.0.21"
          AssociatePublicIpAddress: True
          SubnetId: !Ref "Subnet"
          GroupSet:
            - !Ref "SecurityGroup"
          DeleteOnTermination: True
      Tags:
        - Key: Name
          Value: worker1

  Worker2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", "ami"]
      KeyName: !Ref "KeyName"
      InstanceType: "t2.small"
      IamInstanceProfile: !Ref "InstanceProfile"
      SourceDestCheck: False
      NetworkInterfaces:
        - DeviceIndex: 0
          PrivateIpAddress: "10.240.0.22"
          AssociatePublicIpAddress: True
          SubnetId: !Ref "Subnet"
          GroupSet:
            - !Ref "SecurityGroup"
          DeleteOnTermination: True
      Tags:
        - Key: Name
          Value: worker2


  PodRoute0:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref "RouteTable"
      DestinationCidrBlock: "10.200.0.0/24"
      InstanceId: !Ref "Worker0"


  PodRoute1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref "RouteTable"
      DestinationCidrBlock: "10.200.1.0/24"
      InstanceId: !Ref "Worker1"

  PodRoute2:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref "RouteTable"
      DestinationCidrBlock: "10.200.2.0/24"
      InstanceId: !Ref "Worker2"

Outputs:
  Controller0:
    Description: Instance ID of Kubernetes Controller0
    Value: !Ref "Controller0"

  Controller1:
    Description: Instance ID of Kubernetes Controller1
    Value: !Ref "Controller1"

  Controller2:
    Description: Instance ID of Kubernetes Controller2
    Value: !Ref "Controller2"

  Worker0:
    Description: Instance ID of Kubernetes Worker0
    Value: !Ref "Worker0"

  Worker1:
    Description: Instance ID of Kubernetes Worker1
    Value: !Ref "Worker1"

  Worker2:
    Description: Instance ID of Kubernetes Worker2
    Value: !Ref "Worker2"

  PublicAddress:
    Description: Public address of the load balancer
    Value: !GetAtt ["LoadBalancer", "DNSName"]
